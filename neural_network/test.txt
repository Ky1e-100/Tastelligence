def ingredients_to_binary_vector(ingredient_names):
    binary_vector = np.zeros(len(all_ingredients))
    for ingredient in ingredient_names:
        if ingredient in ingredient_to_index:
            binary_vector[ingredient_to_index[ingredient]] = 1
    return binary_vector
    
pickle_data = pd.read_pickle(PICKLE_PATH)

# print(pickle_data)
# print(f"Data type: {type(pickle_data)}")
# print(f"Columns: {pickle_data.columns}")


# Load the PP_recipes.csv file
recipes_df = pd.read_csv(RECIPE_PATH)

# Create a dictionary to map ingredient ids to ingredient names from ingr_map.pkl
ingredient_dict = dict(zip(pickle_data['id'], pickle_data['raw_ingr']))

# Map the ingredient_ids from PP_recipes.csv to the ingredient names
# We assume ingredient_ids in PP_recipes are stored as lists (or stringified lists), so we eval them
recipes_df['ingredient_names'] = recipes_df['ingredient_ids'].apply(lambda x: [ingredient_dict.get(i, 'Unknown') for i in eval(x)])

# Display the first few rows to check the mapping
# print(recipes_df[['id', 'ingredient_ids', 'ingredient_names']].head())

all_ingredients = pickle_data['raw_ingr'].unique()
ingredient_to_index = {ingredient: idx for idx, ingredient in enumerate(all_ingredients)}

recipes_df['ingredient_binary'] = recipes_df['ingredient_names'].apply(ingredients_to_binary_vector)

# Load the interactions_train.csv file
interactions_train_path = 'dataset/interactions_train.csv'  # Update if the file path changes
interactions_train_df = pd.read_csv(interactions_train_path)

# Merge the ratings with the ingredient binary vectors
merged_data = pd.merge(interactions_train_df, recipes_df[['id', 'ingredient_binary']], left_on='recipe_id', right_on='id')

# Display the first few rows to see the merged data

print(merged_data[['user_id', 'recipe_id', 'rating', 'ingredient_binary']].head())

# # Print the ingredient binary vector for the first recipe in the dataset
# first_recipe_binary = merged_data.iloc[0]['ingredient_binary']
# for num in first_recipe_binary:
#     if num != 0:
#         print(num)